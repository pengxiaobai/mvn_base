1.什么mybatis 
MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC
 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML
 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。
 
 =============================================
2.mybatis有哪些作用

3.如何使用mybatis
	（1）Mybatis每次操作数据库的时候，都是通过SqlSession和数据完成会话的，
	（2）SqlSession要通过SqlSessionFactory来产生
		例如:
			String file = "config.xml";
			//获取文件流
			InputStream is = Resources.getResourceAsStream(file);
			//建立SQLSessionFactory
			SqlSessionFactory factory = SqlSessionFactoryBuilder().build(is);
			//获取SqlSession
			SqlSession sqlSession = factory.openSession();
		注意：SqlSessionFactoryBuilder一旦创建完SqlSessionFactory就不要了，所以不要全局的创建它，最佳的作用域是在方法中
		     SqlSessionFactory一旦创建就是在程序运行期中一直存在，最佳的创建是在程序中只有一个
		     SqlSession是每次与数据库交互数据的时候创建，最佳的作用域是在方法中，每次使用完后要把他及时的关闭
	（3）映射器实例（Mapper Instance）
		映射器是创建用来绑定映射语句的接口。映射器接口的实例是从 SqlSession 中获得的。因此从技术层面讲，
		映射器实例的最大作用域是和 SqlSession 相同的，因为它们都是从 SqlSession 里被请求的。尽管如此，映射器实例的最佳作用域是方法作用域
	(4)配置文件具体可以看 config包下的文件
	(5)映射文件配置
		SQL 映射文件有很少的几个顶级元素（按照它们应该被定义的顺序）：
		    cache – 给定命名空间的缓存配置。
		    cache-ref – 其他命名空间缓存配置的引用。
		    resultMap – 是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象。
		    parameterMap – 已废弃！老式风格的参数映射。内联参数是首选,这个元素可能在将来被移除，这里不会记录。
		    sql – 可被其他语句引用的可重用语句块。
		    insert – 映射插入语句
		    update – 映射更新语句
		    delete – 映射删除语句
		    select – 映射查询语句
		
		========================Select元素的属性设置=======================
		id 	在命名空间中唯一的标识符，可以被用来引用这条语句。
		
		parameterType 	将会传入这条语句的参数类的完全限定名或别名。这个属性是可选的，因为 MyBatis 
						可以通过 TypeHandler 推断出具体传入语句的参数，默认值为 unset。
						
		parameterMap 	这是引用外部 parameterMap 的已经被废弃的方法。使用内联参数映射和 parameterType 属性。
		
		resultType 	从这条语句中返回的期望类型的类的完全限定名或别名。注意如果是集合情形，那应该是集合可以包含的类型，
					而不能是集合本身。使用 resultType 或 resultMap，但不能同时使用。
					
		resultMap 	外部 resultMap 的命名引用。结果集的映射是 MyBatis 最强大的特性，对其有一个很好的理解的话，
					许多复杂映射的情形都能迎刃而解。使用 resultMap 或 resultType，但不能同时使用。
					
		flushCache 	将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：false。
		
		useCache 	将其设置为 true，将会导致本条语句的结果被二级缓存，默认值：对 select 元素为 true。
		
		timeout 	这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）。
		
		fetchSize 	这是尝试影响驱动程序每次批量返回的结果行数和这个设置值相等。默认值为 unset（依赖驱动）。
		
		statementType 	STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 
						或 CallableStatement，默认值：PREPARED。
						
		resultSetType 	FORWARD_ONLY，SCROLL_SENSITIVE 或 SCROLL_INSENSITIVE 中的一个，默认值为 unset （依赖驱动）。
		
		databaseId 	如果配置了 databaseIdProvider，MyBatis 会加载所有的不带 databaseId 或匹配当前 databaseId 的语句；
					如果带或者不带的语句都有，则不带的会被忽略。
					
		resultOrdered 	这个设置仅针对嵌套结果 select 语句适用：如果为 true，就是假设包含了嵌套结果集或是分组了，
						这样的话当返回一个主结果行的时候，就不会发生有对前面结果集的引用的情况。这就使得在获取嵌套的结果集
						的时候不至于导致内存不够用。默认值：false。
						
		resultSets 	这个设置仅对多结果集的情况适用，它将列出语句执行后返回的结果集并每个结果集给一个名称，名称是逗号分隔的。 
		
	    ========================Insert,Update,Delete属性==========================
	    id 	命名空间中的唯一标识符，可被用来代表这条语句。
	    
		parameterType 	将要传入语句的参数的完全限定类名或别名。这个属性是可选的，因为 MyBatis 可以通过 TypeHandler
						 推断出具体传入语句的参数，默认值为 unset。
						 
		parameterMap 	这是引用外部 parameterMap 的已经被废弃的方法。使用内联参数映射和 parameterType 属性。
		
		flushCache 	将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：true（对应插入、更新和删除语句）。
		
		timeout 	这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）。
		
		statementType 	STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，
						PreparedStatement 或 CallableStatement，默认值：PREPARED。
						
		useGeneratedKeys 	（仅对 insert 和 update 有用）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 
							方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系数据库管理系统的自动递增字段），默认值：false。
							
		keyProperty 	（仅对 insert 和 update 有用）唯一标记一个属性，MyBatis 会通过 getGeneratedKeys 
						的返回值或者通过 insert 语句的 selectKey 子元素设置它的键值，默认：unset。
						如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
						
		keyColumn 	（仅对 insert 和 update 有用）通过生成的键值设置表中的列名，这个设置仅在某些数据库
					（像 PostgreSQL）是必须的，当主键列不是表中的第一列的时候需要设置。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
					
		databaseId 	如果配置了 databaseIdProvider，MyBatis 会加载所有的不带 databaseId 或匹配当前 databaseId
					 的语句；如果带或者不带的语句都有，则不带的会被忽略。 

	=======================selectKey 属性设置========================
	keyProperty 	selectKey 语句结果应该被设置的目标属性。
					如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
	keyColumn 	匹配属性的返回结果集中的列名称。如果希望得到多个生成的列，
				也可以是逗号分隔的属性名称列表。
	resultType 	结果的类型。MyBatis 通常可以推算出来，但是为了更加确定写上也
				不会有什么问题。MyBatis 允许任何简单类型用作主键的类型，包括字符串。如果希望作用
				于多个生成的列，则可以使用一个包含期望属性的 Object 或一个 Map。
	order 	这可以被设置为 BEFORE 或 AFTER。如果设置为 BEFORE，那么它会首先选择主键，
			设置 keyProperty 然后执行插入语句。如果设置为 AFTER，那么先执行插入语句，然后是 selectKey 元素 - 这和像 Oracle 的数据库相似，在插入语句内部可能有嵌入索引调用。
	statementType 	与前面相同，MyBatis 支持 STATEMENT，PREPARED 和 CALLABLE 
					语句的映射类型，分别代表 PreparedStatement 和 CallableStatement 类型。 
4.总结